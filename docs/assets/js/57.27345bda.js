(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{610:function(t,v,s){"use strict";s.r(v);var _=s(13),a=Object(_.a)({},(function(){var t=this,v=t.$createElement,s=t._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"大佬是如何巩固自己的科班计算机基础的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#大佬是如何巩固自己的科班计算机基础的"}},[t._v("#")]),t._v(" 大佬是如何巩固自己的科班计算机基础的？")]),t._v(" "),s("p",[t._v("有人说: "),s("strong",[t._v("计算机基础就像是张无忌修炼的《九阳神功》一样，是程序员的内功心法。")])]),t._v(" "),s("p",[t._v("我觉得这说的一点都不为过，相信工作过一段时间的人都能够意识到计算机基础的重要性，刚开始你上手一些简单业务的时候可能是发觉不到的，可能你入门开发的时候拿着框架撸了一个外卖的页面还觉得自己挺牛 X 的，编程也就那么回事。")]),t._v(" "),s("p",[t._v("但是一旦你进入到领域的深水区，你就会发现这些计算机基础真的是无处不在，可能一些没什么科班基础的从业者鼓捣很久的东西，当他还在赞不绝口的时候，在科班的人看来，仅仅只是基本功而已，就跟走路和呼吸一样自然。")]),t._v(" "),s("p",[t._v("而且我一直认为，"),s("strong",[t._v("判断一个程序员是否科班出身最有力的依据，是对于计算机基础的理解水平，而并非文凭、绩点")]),t._v("。")]),t._v(" "),s("p",[t._v("我这里所说的计算机基础主要指的是考研 408 那四门专业课: "),s("strong",[t._v("计算机组成原理")]),t._v("、"),s("strong",[t._v("操作系统")]),t._v("、"),s("strong",[t._v("计算机网络")]),t._v("以及"),s("strong",[t._v("数据结构与算法")]),t._v("，外加一门"),s("strong",[t._v("编译原理")]),t._v("，一共五门。")]),t._v(" "),s("p",[t._v('Vue 的作者尤雨溪曾经说在编译原理这方面，所谓"科班出身"的人和普通人的区别，仅仅是多花了三四个月学了一门课而已，但我想说三四个月都是给面子了，很多科班的人也就比普通人多学了三四天而已。')]),t._v(" "),s("p",[t._v("如果你现在是计算机科班的学生，请珍惜现在学校的时光吧，好好把计算机基础打扎实，这是你们学习最宝贵的时间，以后工作了再来补真的难度要上一个量级。如果你是非计算机专业的人，也不用羡慕，更不用过于焦虑，这个行业一直都是看真才实学，好好把计算机基础学好其实比空有一张计算机相关专业的文凭要强得多。")]),t._v(" "),s("p",[t._v("这里是我整理的计算机基础必备的资料和书单，每一份都是我精挑细选的，而且不像某些帖子直接放大几个 G 的资料，我觉得那样是极其不负责任的，每个人的时间都是有限的，如果不切实际地灌输这样庞杂的资料，那么对大部分人而言这些资料应该只有一种结果: "),s("strong",[t._v("躺灰")]),t._v("。下面的资料虽然不多，但都足够经典，足以建立起完整的计算机知识体系，强烈推荐给大家。")]),t._v(" "),s("h3",{attrs:{id:"_1-计算机组成原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-计算机组成原理"}},[t._v("#")]),t._v(" 1. 计算机组成原理")]),t._v(" "),s("p",[t._v("上学的时候这门课也叫计算机体系结构，这个我不多推荐，书就推荐一本:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img2.baidu.com/it/u=1887733233,325119086&fm=224&fmt=auto&gp=0.jpg",alt:"图片"}})]),t._v(" "),s("p",[t._v("这本书真的是大名鼎鼎，学计算机的应该都有所耳闻。不过注意，这是一本教学课本，它的作者是卡内基梅隆的计算机主任，是卡内基梅隆大学计算机专业的御用教材。不得不说，这本书比国内的某些教材要经典太多，非常适合大家从零开始认识计算机组成原理，当然里面还也有一些操作系统的知识，总而言之，知识非常成体系，适合花整块的时间仔细精读。相信踏踏实实啃下来之后，你已经是对计算机底层工作的原理非常熟悉了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img1.baidu.com/it/u=1658439176,3930919458&fm=224&fmt=auto&gp=0.jpg",alt:"图片"}})]),t._v(" "),s("p",[t._v("当然，如果你不喜欢看书这种学习方式的话，也是有其他的学习的路径了。都 2021 年了，现在网络上资源这么丰富，学习的门槛可以说越来越低了，就看你愿不愿意主动获取信息，不过还好，能看到这里说明你已经是一个获取信息能力比较强的人了。这里我推荐几份比较好的资料。")]),t._v(" "),s("p",[t._v("第一是 CMU 的 CSAPP 课程，是上面这本书的视频版本，也非常有名，这里有一份中文字幕版的视频，链接如下:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://www.bilibili.com/video/BV1iW411d7hd?from=search&seid=1938400006943571672\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("第二是哈工大的 MOOC 视频，质量真心很高。MOOC 现在貌似课程结束了，我在 B 站找到了高清原版，链接如下:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://www.bilibili.com/video/BV1t4411e7LH?from=search&seid=13256066999533259456\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("第三是极客时间的《深入浅出计算机组成原理》专栏，这里就不放二维码了，以免大家觉得又在打他们的广告。作者是工作了十几年的大牛，而且后面会有手把手的实战，看完会有很多新的收获。")]),t._v(" "),s("h3",{attrs:{id:"_2-操作系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-操作系统"}},[t._v("#")]),t._v(" 2. 操作系统")]),t._v(" "),s("p",[t._v("对于操作系统这块，我推荐的核心打法是: 啃下一本经典的专业书，然后"),s("strong",[t._v("造轮子巩固")]),t._v("，并且不断"),s("strong",[t._v("复盘")]),t._v("，形成学习"),s("strong",[t._v("闭环")]),t._v("。")]),t._v(" "),s("p",[t._v("对于专业书而言 ，我就推荐这一本经典的书:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img0.baidu.com/it/u=324235039,2856265961&fm=26&fmt=auto&gp=0.jpg",alt:"图片"}})]),t._v(" "),s("p",[t._v("只推荐这一本，其他市面上具体操作系统比如 Linux 操作之类的书，我个人建议当做工具书查查就好，这些工具书在最后的书单都会给大家。但如果要系统学习，我只推荐啃下这本书。")]),t._v(" "),s("p",[t._v("注意上面这本书是让你掌握基本的理论，比如基本的 "),s("code",[t._v("PV 原语逻辑")]),t._v("、"),s("code",[t._v("进程调度算法")]),t._v("、"),s("code",[t._v("分页置换原理")]),t._v("、"),s("code",[t._v("文件系统原理")]),t._v("等等，但是光理解这些理论是不够的！操作系统这门学科需要实战！")]),t._v(" "),s("p",[t._v("国外有很多的操作系统实战的课程，像 MIT、哈佛这种，一般会给你一个大致的 OS 框架，然后让你去完成里面的模块，比如文件系统、进程调度器、分页管理等等，甚至直接搞个大实验，让你写一个完整的操作系统。")]),t._v(" "),s("p",[t._v("国内相对来说这种实战的就少一些，不过我这里有一些可以分享给大家的资料。")]),t._v(" "),s("p",[t._v("首先是哈工大的 MOOC 视频，带你从 Linux 内核代码的角度理解操作系统，讲的非常细致，很硬核，直接到了核心源码层次，推荐大家看看。MOOC 上好像结课了，给大家找了 B 站的版本，链接如下:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://www.bilibili.com/video/BV1d4411v7u7?from=search&seid=15375263820388322113\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("也有一些热心网友手写简易的操作系统，并基本完整地实现了各个模块，而且放到了开源社区，这里提供一个项目供大家参考:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://github.com/Simple-XX/SimpleKernel\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"_3-计算机网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-计算机网络"}},[t._v("#")]),t._v(" 3. 计算机网络")]),t._v(" "),s("p",[t._v("计算机网络是 CS 当中非常关键的一门课，但无奈的是，大学里面光靠上课学的那些概念和理论是远远不够的，学过不久就容易忘，而且对于 TCP/HTTP 这些重要的协议并没有太细致的讲解。")]),t._v(" "),s("p",[t._v("对于计算机网络而言，我推荐的打法是: "),s("strong",[t._v("看理论入门")]),t._v(" + "),s("strong",[t._v("抓包测试")]),t._v(" +  "),s("strong",[t._v("深挖理论")]),t._v(" + "),s("strong",[t._v("手写轮子")]),t._v("。")]),t._v(" "),s("p",[t._v("首先，对于理论入门而言，推荐《计算机网络: 自顶向下方法》:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img0.baidu.com/it/u=583951889,1314403309&fm=26&fmt=auto&gp=0.jpg",alt:"图片"}})]),t._v(" "),s("p",[t._v("不想看书的同学也可以看看比较系统的专栏，推荐极客时间的《趣谈网络协议》、《透视 HTTP 协议》，也有比较系统的国外课程，这里推荐斯坦福 CS144 计算机网络课程，有热心网友已经上传了中文字幕版的视频，下面是课程链接：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://www.bilibili.com/video/BV137411Z7LR/\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("当然第一遍只是过一下理论，知道网络分层的含义、各层协议及作用、TCP 的各种特性、HTTP 的各项功能等等。接下来需要在实际的过程中去体会网络包的传输真实情况，也就是需要自己去抓包，推荐一本书:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img2.baidu.com/it/u=3216473000,2909202259&fm=224&fmt=auto&gp=0.jpg",alt:"图片"}})]),t._v(" "),s("p",[t._v("这本书行文很风趣，作者挺有意思，跟着书里面的教程来做也是没问题的，可以作为我们学习抓包的"),s("strong",[t._v("抓手")]),t._v("。")]),t._v(" "),s("p",[t._v("在跟着实践一遍之后，有了一定的实践经验，然后回归理论，把之前没有理解或者理解不深刻的地方再学习一遍，注意这一遍，讲究的是细致，也就是进入深挖理论的阶段。比如关于 TCP 和 HTTP，我当时整理了这些问题:")]),t._v(" "),s("p",[t._v("当然，如果再深入一点的话，就是去动手实现了，这个难度会比较大，有兴趣的可以去尝试，斯坦福 CS144 课程最后有个 assignment/lab ，内容是手写一个 TCP，课程链接如下:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://www.scs.stanford.edu/10au-cs144/\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("目前，也有同学实现了一版 TCP，可以参考一下下面的博客:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://www.cnblogs.com/kangyupl/p/stanford_cs144_labs.html\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"_4-数据结构和算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-数据结构和算法"}},[t._v("#")]),t._v(" 4. 数据结构和算法")]),t._v(" "),s("p",[t._v("我看到其他的帖子谈到数据结构和算法的学习，动不动就推荐《算法导论》这种硬核大部头著作，看的我瑟瑟发抖，原来大家都是看这本书入门算法的吗？")]),t._v(" "),s("p",[t._v("我想在很久以前，大家都只能通过看书的方式来学习，但对于这门注重实践的学科，看书的方式终究还是效率太低了，尤其是《算法导论》当中各种算法复杂度的证明(至今仍记得主定理公式的证明)，真的是很劝退初学者。都 2021 年了，我们是不是可以去寻找一些更好的学习方式呢？")]),t._v(" "),s("p",[t._v("MOOC 网也有相关高校的视频，不过一般数据结构和算法是分为两门课来上的，当然这些都比较偏理论了，这里推荐浙大的数据结构课程和哈工大的算法设计与分析，涵盖了本科需要掌握基本所有的数据结构和算法，链接如下:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://www.icourse163.org/course/zju-93001\nhttps://www.bilibili.com/video/BV1Ex411H7QJ?from=search&seid=13325268161991822480\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("注意哦！这才只是入门。刚刚已经提到过，数据结构和算法是非常注重实践的学科，看了书或者看完视频，甚至觉得自己已经理解了那些算法，这也并不代表你完全掌握了这些知识，要学好数据结构和算法，必须要反复地练习、练习、再练习，这个过程是你无法省略的。")]),t._v(" "),s("p",[t._v("在哪练习 ？"),s("strong",[t._v("LeetCode")]),t._v("。")]),t._v(" "),s("p",[t._v("怎么练习？这就逃不开老生常谈的另外一个话题了: "),s("strong",[t._v("刷题")]),t._v("。")]),t._v(" "),s("p",[t._v("首先我是非常反对题海战术的，比如通过把 LeetCode 上的题全都做一遍，来精进自己的算法能力，这是极端不可取的，大部分人没这个时间，而且已经会做的类型也没必要重复刷。但我认为适当强度的训练量是必须的，与其叫刷题，不如称之为"),s("code",[t._v("系统性的练习")]),t._v("。")]),t._v(" "),s("p",[t._v("其中有两个关键字，一个是"),s("code",[t._v("系统")]),t._v("，一个是"),s("code",[t._v("练习")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("No.1 如何做到系统的训练？")])]),t._v(" "),s("p",[t._v("我想按照LeetCode上的顺序一题一题刷肯定不是系统，大部分情况是相邻的几个题毫无联系，这一题做了个链表相关的，下一题又是一个哈希表，再下一题又了一个二分搜索树，思维不断的跳转，一方面可能你的基础很薄弱，各个数据结构和算法理解的并不深刻，反复跳到你不熟悉的地方，会挫败你的信心，增加焦虑，甚至直接劝退，另一方面，可能再遇到难一点的链表题，你又不会了，可能你会纳闷: 不是刚刚才写出来了一个链表题吗？怎么现在又不会了？容易让你产生自我怀疑，也会影响你训练的自驱力。")]),t._v(" "),s("p",[t._v("因此我觉得分专题各个训练突破是一个相对合理的战略。在做到专和精的同时，也会让你掌握的更快，从而更容易解出类似的题，增强自信心。")]),t._v(" "),s("p",[t._v("比如分这些专题来一一突破:")]),t._v(" "),s("blockquote",[s("p",[t._v("链表、栈和队列、哈希表、二叉树、字典树、并查集、常见排序和查找算法、回溯算法、动态规划、贪心算法、LRU和LFU、字符串和正则")])]),t._v(" "),s("p",[s("strong",[t._v("No.2 如何做到真正的练习")]),t._v("？")]),t._v(" "),s("p",[t._v("《异类:不一样的成功启示录》这本书里面谈到一万小时刻意练习成为高手的理论。后面也很多人谈到这个理论，我几年前就听说过，但真正体会到它的实际意义却是在训练算法的过程中，而且是走了很多弯路之后。可见理论到实际的过程是多么艰难。")]),t._v(" "),s("p",[t._v("我所理解的刻意练习，运用到算法的训练上面来，就是两点:")]),t._v(" "),s("ul",[s("li",[t._v("经常性地做你不会做的题")]),t._v(" "),s("li",[t._v("多种解法方式轮流试，最大化地挖掘一道题的价值")])]),t._v(" "),s("p",[t._v("刻意练习有一个重要的观点是"),s("strong",[t._v("走出舒适圈")]),t._v("。对于算法练习也是一样，为什么很多人觉得刷算法没用，那是因为他们总是在做自己熟悉的题型，用自己熟悉的方法，蹲在自己的舒适圈，这样做的再多也意义不大，但是如果总是在做自己不熟练的题型，用不一样的方法，对于自己思维的成长是相当有帮助的，所以我觉得把握经常性地做不会的题，这样做的越多越好，当然了，时间有限，我们需要根据自己的需要来取舍。")]),t._v(" "),s("p",[t._v("之所以我会把这个过程叫做练习，而不是刷题，就是因为练习的本质是练,而不是简单的AC就可以。比如下面这一题:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/07/12/gQNkPDbh5I1G3Ex.png",alt:"Snipaste_2021-07-12_15-02-12.png"}})]),t._v(" "),s("p",[t._v("可能有经验的同学，用递归的方式很容易就解出来了。但是，你有想过如何用非递归的方式吗？如果能用非递归来是实现一遍，相信给自己带来的帮助和提升会比递归解大得多。而对于刷题的同学，无非追求两样东西，一是"),s("strong",[t._v("让代码通过")]),t._v("，二是"),s("strong",[t._v("增加题量")]),t._v("。但与真正的练习相比，哪一个对自己帮助更大呢？明显是后者，虽然短期内它带来的快感和成就感不如刷题来的明显。")]),t._v(" "),s("h3",{attrs:{id:"_5-编译原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-编译原理"}},[t._v("#")]),t._v(" 5. 编译原理")]),t._v(" "),s("p",[t._v("上面四门课是 408 必考的四门专业课，对于计算机专业的重要性不言而喻，但大家好像都忽略了另外一门硬核且重要的科目: 编译原理。")]),t._v(" "),s("p",[t._v("作为一个程序员而言，我们写的各种各样的程序，本质上都是字符串，那这些字符串如何被转换为计算机可以识别的语言并且执行的呢？这就是编译原理要解决的问题。其实广义的来说，任何一种编程语言转换到另一种规则的编程语言的过程，都可以叫做编译。拿现在的前端领域来说，编译原理已经遍地开花了，无论是浏览器解析 HTML 标签语法的过程，还是诸如 babel、ts-loader 这些工具转换 JS/TS 代码的过程，都离不开编译原理。")]),t._v(" "),s("p",[t._v("之所以说编译原理这门课硬核，是因为里面确实有很多复杂的概念理解，比如DFA、NFA、递归下降、LL/LR 分析方法、AST 及中间代码优化等等，当时在学校学的时候还是挺痛苦的，而且学完之后对于编译原理的实际运用，还是一脸懵逼。对于这门学科，推荐一本足够经典的书:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img2.baidu.com/it/u=710952050,2242474386&fm=26&fmt=auto&gp=0.jpg",alt:"图片"}})]),t._v(" "),s("p",[t._v("当然，也可以通过一些专栏，能帮助你入门编译原理，极客时间的《编译原理之美》和《编译原理实战课》，相对于看书，对初学者比较友好，而且质量也很高，适合系统性的入门和学习。")]),t._v(" "),s("p",[t._v("关于计算机基础的学习就分享到这里啦，希望对你有所帮助。")])])}),[],!1,null,null,null);v.default=a.exports}}]);